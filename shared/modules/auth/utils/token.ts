/**
 * üé´ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏
 */

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ payload JWT —Ç–æ–∫–µ–Ω–∞
 */
export interface TokenPayload {
  id: string;
  role: string;
  iat: number; // issued at - –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
  exp: number; // expires - –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
}

/**
 * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
 *
 * @param token - JWT —Ç–æ–∫–µ–Ω
 * @returns –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export function decodeToken(token: string): TokenPayload | null {
  try {
    // JWT —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∞—Å—Ç–µ–π: header.payload.signature
    const parts = token.split(".");
    if (parts.length !== 3) {
      return null;
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
    const payload = parts[1];
    const decodedPayload = atob(payload.replace(/-/g, "+").replace(/_/g, "/"));
    const parsed = JSON.parse(decodedPayload) as TokenPayload;

    return parsed;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
 *
 * @param token - JWT —Ç–æ–∫–µ–Ω
 * @returns true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
 */
export function isTokenExpired(token: string): boolean {
  const payload = decodeToken(token);

  if (!payload || !payload.exp) {
    return true;
  }

  // exp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, Date.now() –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const currentTime = Date.now() / 1000;

  return payload.exp < currentTime;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ—á–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
 *
 * @param token - JWT —Ç–æ–∫–µ–Ω
 * @param minutesBeforeExpiry - –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—á–∏—Ç–∞—Ç—å "—Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç"
 * @returns true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç
 */
export function isTokenExpiringSoon(
  token: string,
  minutesBeforeExpiry: number = 5
): boolean {
  const payload = decodeToken(token);

  if (!payload || !payload.exp) {
    return true;
  }

  const currentTime = Date.now() / 1000;
  const expiryTime = payload.exp;
  const timeUntilExpiry = expiryTime - currentTime;
  const minutesUntilExpiry = timeUntilExpiry / 60;

  return minutesUntilExpiry <= minutesBeforeExpiry;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
 *
 * @param token - JWT —Ç–æ–∫–µ–Ω
 * @returns –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null
 */
export function getRoleFromToken(token: string): string | null {
  const payload = decodeToken(token);
  return payload?.role || null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
 *
 * @param token - JWT —Ç–æ–∫–µ–Ω
 * @returns ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null
 */
export function getUserIdFromToken(token: string): string | null {
  const payload = decodeToken(token);
  return payload?.id || null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
 *
 * @param token - JWT —Ç–æ–∫–µ–Ω
 * @returns –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–ª–∏ null
 */
export function getTokenExpiry(token: string): Date | null {
  const payload = decodeToken(token);

  if (!payload || !payload.exp) {
    return null;
  }

  // exp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, Date –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  return new Date(payload.exp * 1000);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
 *
 * @param token - JWT —Ç–æ–∫–µ–Ω
 * @returns –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "5 —Ö–≤–∏–ª–∏–Ω" –∏–ª–∏ "2 –≥–æ–¥–∏–Ω–∏"
 */
export function getTimeUntilExpiry(token: string): string | null {
  const payload = decodeToken(token);

  if (!payload || !payload.exp) {
    return null;
  }

  const currentTime = Date.now() / 1000;
  const expiryTime = payload.exp;
  const secondsLeft = expiryTime - currentTime;

  if (secondsLeft <= 0) {
    return "–ó–∞–∫—ñ–Ω—á–∏–≤—Å—è";
  }

  const minutesLeft = Math.floor(secondsLeft / 60);
  const hoursLeft = Math.floor(minutesLeft / 60);
  const daysLeft = Math.floor(hoursLeft / 24);

  if (daysLeft > 0) {
    return `${daysLeft} ${daysLeft === 1 ? "–¥–µ–Ω—å" : "–¥–Ω—ñ–≤"}`;
  }

  if (hoursLeft > 0) {
    return `${hoursLeft} ${hoursLeft === 1 ? "–≥–æ–¥–∏–Ω–∞" : "–≥–æ–¥–∏–Ω"}`;
  }

  if (minutesLeft > 0) {
    return `${minutesLeft} ${minutesLeft === 1 ? "—Ö–≤–∏–ª–∏–Ω–∞" : "—Ö–≤–∏–ª–∏–Ω"}`;
  }

  return "–ú–µ–Ω—à–µ —Ö–≤–∏–ª–∏–Ω–∏";
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–∫–µ–Ω–∞
 *
 * @param token - JWT —Ç–æ–∫–µ–Ω
 * @returns true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */
export function isValidTokenStructure(token: string): boolean {
  const payload = decodeToken(token);

  if (!payload) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  return !!(payload.id && payload.role && payload.exp && payload.iat);
}
