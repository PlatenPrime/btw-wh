import { SERVER_URL } from "@/constants/server";
import {
  isAuthError,
  isRoleError,
  type ErrorCode,
} from "@/modules/auth/types/errors";
import { getItem, removeItem } from "@/utils/localStorage";
import axios, { type AxiosError } from "axios";

export const apiClient = axios.create({
  baseURL: SERVER_URL,
  timeout: 10000,
});

/**
 * üîê Request Interceptor - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Bearer —Ç–æ–∫–µ–Ω–∞
 */
apiClient.interceptors.request.use(
  (config) => {
    const token = getItem("auth_token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error),
);

/**
 * ‚ö†Ô∏è Response Interceptor - –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
 */
apiClient.interceptors.response.use(
  (response) => response,
  (error: AxiosError<{ message: string; code?: ErrorCode }>) => {
    if (error.response) {
      const { status, data } = error.response;
      const errorCode = data?.code;

      // 401 Unauthorized - –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
      if (status === 401) {
        if (errorCode && isAuthError(errorCode)) {
          // –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —Ç–æ–∫–µ–Ω–∞ - –≤–∏—Ö–æ–¥–∏–º–æ
          if (
            errorCode === "TOKEN_EXPIRED" ||
            errorCode === "INVALID_TOKEN" ||
            errorCode === "NO_TOKEN" ||
            errorCode === "INVALID_TOKEN_FORMAT" ||
            errorCode === "INVALID_TOKEN_PAYLOAD"
          ) {
            removeItem("auth_token");
            removeItem("auth_user");

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É unauthorized
            if (window.location.hash !== "#/login") {
              window.location.hash = "#/unauthorized";
            }
          }
        }
      }

      // 403 Forbidden - –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤
      if (status === 403) {
        if (errorCode && isRoleError(errorCode)) {
          // –Ø–∫—â–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ forbidden
          if (errorCode === "INSUFFICIENT_PERMISSIONS") {
            if (window.location.hash !== "#/forbidden") {
              window.location.hash = "#/forbidden";
            }
          }
        }
      }

      // 500 Internal Server Error
      // 404 Not Found
      // Network errors
    }

    return Promise.reject(error);
  },
);
