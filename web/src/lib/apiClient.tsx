import { toast } from "@/components/ui/use-toast";
import { SERVER_URL } from "@/constants/server";
import {
  getErrorMessage,
  isAuthError,
  isRoleError,
  type ErrorCode,
} from "@/modules/auth/types/errors";
import { getItem, removeItem } from "@/utils/localStorage";
import axios, { type AxiosError } from "axios";

export const apiClient = axios.create({
  baseURL: SERVER_URL,
  timeout: 10000,
});

/**
 * üîê Request Interceptor - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Bearer —Ç–æ–∫–µ–Ω–∞
 */
apiClient.interceptors.request.use(
  (config) => {
    const token = getItem("auth_token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error),
);

/**
 * ‚ö†Ô∏è Response Interceptor - –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
 */
apiClient.interceptors.response.use(
  (response) => response,
  (error: AxiosError<{ message: string; code?: ErrorCode }>) => {
    if (error.response) {
      const { status, data } = error.response;
      const errorCode = data?.code;

      // 401 Unauthorized - –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
      if (status === 401) {
        if (errorCode && isAuthError(errorCode)) {
          const message = getErrorMessage(errorCode);
          toast({
            variant: "destructive",
            title: "–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó",
            description: message,
          });

          // –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —Ç–æ–∫–µ–Ω–∞ - –≤–∏—Ö–æ–¥–∏–º–æ
          if (
            errorCode === "TOKEN_EXPIRED" ||
            errorCode === "INVALID_TOKEN" ||
            errorCode === "NO_TOKEN" ||
            errorCode === "INVALID_TOKEN_FORMAT" ||
            errorCode === "INVALID_TOKEN_PAYLOAD"
          ) {
            removeItem("auth_token");
            removeItem("auth_user");

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É unauthorized
            if (window.location.hash !== "#/login") {
              window.location.hash = "#/unauthorized";
            }
          }
        } else {
          toast({
            variant: "destructive",
            title: "–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó",
            description:
              data?.message || "–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–Ω–æ–≤—É.",
          });
        }
      }

      // 403 Forbidden - –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤
      if (status === 403) {
        if (errorCode && isRoleError(errorCode)) {
          const message = getErrorMessage(errorCode);
          toast({
            variant: "destructive",
            title: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
            description: message,
          });

          // –Ø–∫—â–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ forbidden
          if (errorCode === "INSUFFICIENT_PERMISSIONS") {
            if (window.location.hash !== "#/forbidden") {
              window.location.hash = "#/forbidden";
            }
          }
        } else {
          toast({
            variant: "destructive",
            title: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
            description:
              data?.message || "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó.",
          });
        }
      }

      // 500 Internal Server Error
      if (status === 500) {
        toast({
          variant: "destructive",
          title: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
          description: "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        });
      }

      // 404 Not Found
      if (status === 404) {
        toast({
          variant: "destructive",
          title: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
          description: data?.message || "–ó–∞–ø–∏—Ç—É–≤–∞–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        });
      }
    } else if (error.request) {
      // –ó–∞–ø–∏—Ç –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∞–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î
      toast({
        variant: "destructive",
        title: "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è",
        description:
          "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
      });
    }

    return Promise.reject(error);
  },
);
