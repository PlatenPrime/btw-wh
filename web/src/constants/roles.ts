/**
 * üîê –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

/**
 * –¢–∏–ø—ã —Ä–æ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
 * PRIME (3) > ADMIN (2) > USER (1)
 */
export const RoleType = {
  PRIME: "PRIME",
  ADMIN: "ADMIN",
  USER: "USER",
} as const;

export type RoleType = (typeof RoleType)[keyof typeof RoleType];

/**
 * –ß–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–æ–ª–µ–π
 * –ß–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–≤
 */
export const ROLE_HIERARCHY: Record<RoleType, number> = {
  [RoleType.PRIME]: 3,
  [RoleType.ADMIN]: 2,
  [RoleType.USER]: 1,
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
 *
 * @param userRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param requiredRole - –¢—Ä–µ–±—É–µ–º–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–æ–ª—å
 * @returns true –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤
 *
 * @example
 * hasRoleAccess(RoleType.ADMIN, RoleType.USER) // true - ADMIN >= USER
 * hasRoleAccess(RoleType.USER, RoleType.ADMIN) // false - USER < ADMIN
 * hasRoleAccess(RoleType.PRIME, RoleType.ADMIN) // true - PRIME >= ADMIN
 */
export function hasRoleAccess(
  userRole: string,
  requiredRole: RoleType,
): boolean {
  if (!isValidRole(userRole)) return false;

  const userLevel = ROLE_HIERARCHY[userRole as RoleType] || 0;
  const requiredLevel = ROLE_HIERARCHY[requiredRole];

  return userLevel >= requiredLevel;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Ä–æ–ª—å—é
 *
 * @param role - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns true –µ—Å–ª–∏ —Ä–æ–ª—å –≤–∞–ª–∏–¥–Ω–∞
 */
export function isValidRole(role: string): role is RoleType {
  return Object.values(RoleType).includes(role as RoleType);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–æ–ª–∏
 *
 * @param role - –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ß–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–æ–ª–∏ –∏–ª–∏ 0 –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
 */
export function getRoleLevel(role: string): number {
  if (!isValidRole(role)) return 0;
  return ROLE_HIERARCHY[role as RoleType];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ä–æ–ª–µ–π
 *
 * @param userRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param allowedRoles - –ú–∞—Å—Å–∏–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
 * @returns true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –æ–¥–Ω—É –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π (—Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏)
 *
 * @example
 * hasAnyRole(RoleType.PRIME, [RoleType.ADMIN]) // true
 * hasAnyRole(RoleType.USER, [RoleType.ADMIN, RoleType.PRIME]) // false
 */
export function hasAnyRole(
  userRole: string,
  allowedRoles: RoleType[],
): boolean {
  if (!isValidRole(userRole)) return false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø —Ö–æ—Ç—è –±—ã –∫ –æ–¥–Ω–æ–π –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ä–æ–ª–µ–π
  return allowedRoles.some((requiredRole) =>
    hasRoleAccess(userRole, requiredRole),
  );
}

/**
 * –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π (–¥–ª—è UI)
 */
export const ROLE_LABELS: Record<RoleType, string> = {
  [RoleType.PRIME]: "–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
  [RoleType.ADMIN]: "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
  [RoleType.USER]: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 *
 * @param role - –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
 */
export function getRoleLabel(role: string): string {
  if (!isValidRole(role)) return "–ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å";
  return ROLE_LABELS[role as RoleType];
}
