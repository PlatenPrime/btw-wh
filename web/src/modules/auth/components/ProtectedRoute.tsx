import { Loader } from "@/components/shared/loading-states/loader.tsx";
import { useAuth } from "@/modules/auth/api/hooks/useAuth.ts";
import type { RoleType } from "@/modules/auth/api/types";
import type { ReactNode } from "react";
import { Navigate, useLocation } from "react-router";

interface ProtectedRouteProps {
  /**
   * –î–µ—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
   */
  children: ReactNode;

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   * –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
   * –° —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏: PRIME > ADMIN > USER
   */
  allowedRoles?: RoleType[];

  /**
   * –ï—Å–ª–∏ true, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–ª–∏ (–±–µ–∑ —É—á–µ—Ç–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏)
   * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - false
   */
  exactMatch?: boolean;
}

/**
 * üõ°Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã —Ä–æ—É—Ç–æ–≤ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π
 *
 * @example
 * // –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
 * <ProtectedRoute>
 *   <Dashboard />
 * </ProtectedRoute>
 *
 * @example
 * // –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ –≤—ã—à–µ
 * <ProtectedRoute allowedRoles={[RoleType.ADMIN]}>
 *   <AdminPanel />
 * </ProtectedRoute>
 *
 * @example
 * // –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ PRIME
 * <ProtectedRoute allowedRoles={[RoleType.PRIME]} exactMatch>
 *   <SuperAdminPanel />
 * </ProtectedRoute>
 */
export function ProtectedRoute({
  children,
  allowedRoles,
  exactMatch = false,
}: ProtectedRouteProps) {
  const { user, isLoading, hasAnyRole } = useAuth();
  const location = useLocation();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (isLoading) {
    return <Loader />;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ unauthorized
  if (!user) {
    // –ò—Å–∫–ª—é—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    if (
      location.pathname !== "/login" &&
      location.pathname !== "/register" &&
      location.pathname !== "/unauthorized" &&
      location.pathname !== "/forbidden"
    ) {
      return <Navigate to="/unauthorized" state={{ from: location }} replace />;
    }
  }

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã allowedRoles - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  if (user && allowedRoles && allowedRoles.length > 0) {
    let hasAccess = false;

    if (exactMatch) {
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–ª–∏
      hasAccess = allowedRoles.includes(user.role);
    } else {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏
      hasAccess = hasAnyRole(allowedRoles);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ forbidden
    if (!hasAccess) {
      return <Navigate to="/forbidden" state={{ from: location }} replace />;
    }
  }

  return <>{children}</>;
}
