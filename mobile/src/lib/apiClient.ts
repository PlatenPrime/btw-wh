import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';

export const SERVER_URL = 'https://btw-wh.up.railway.app/api/';

export const apiClient = axios.create({
  baseURL: SERVER_URL,
  timeout: 10000,
});

// üîê –Ü–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø–∏—Ç—É ‚Äî –¥–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω
apiClient.interceptors.request.use(
  async (config) => {
    try {
      const token = await AsyncStorage.getItem('auth_token');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    } catch (error) {
      console.error('Error getting auth token:', error);
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// ‚ö†Ô∏è –Ü–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äî –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      const { status } = error.response;

      if (status === 401) {
        console.warn('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —É–≤—ñ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.');
        // TODO: Implement logout logic
      }

      if (status === 500) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
      }
    }
    return Promise.reject(error);
  }
);
